参考资料 https://www.geeksforgeeks.org/pipe-system-call/


#include "kernel/types.h"
#include "kernel/stat.h"
#include "user/user.h"

int main (int argc,char *argv[])
{
        int child_fd[2],parent_fd[2];
        char buf[1];
        pipe(child_fd);
        pipe(parent_fd);
        int pid = fork();
        if(pid == 0){
        close(child_fd[0]);
        close(parent_fd[1]);
        read(parent_fd[0],buf,sizeof(buf));
        close(parent_fd[0]);
        fprintf(2,"%d:received ping\n",getpid());
        write(child_fd[1],"x",sizeof("x"));
        close(child_fd[1]);
}else {
        close(parent_fd[0]);
        close(child_fd[1]);
        write(parent_fd[1],"x",sizeof("x"));
        close(parent_fd[1]);
        read(child_fd[0],buf,sizeof(buf));
        close(child_fd[0]);
        fprintf(2,"%d: received pong\n",getpid());
}

exit(0);

}

fork（）创建新的进程 新进程将成为原进程的子进程
close（）不用哪个关哪个
read（）从进程中读取数据
rite(child_fd[1],"x",sizeof("x"));向父进程中发送数据 向子进程管道写入x

子进程的读和写
父进程的读和写

如果是子进程则 子进程写入父进程 父进程读   0读1写
如果是父进程则 父进程写入子进程 子进程读

总结：创建了两个管道，一个用于父子进程之间通信（child_fd），另一个用于父进程和子进程之间通信（parent_fd）。父进程向子进程发送 "ping" 消息（即一个 "x"），子进程收到后打印消息并回复 "pong"（即另一个 "x"），父进程收到 "pong" 后也打印消息。这个过程展示了进程间的通信机制。
                                  